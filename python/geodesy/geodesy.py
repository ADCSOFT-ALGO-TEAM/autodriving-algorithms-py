"""
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
由 GPS 坐标正算 Gauss–Krüger 投影下的大地坐标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

作者: mathzhaoliang@gmail.com

参考文献:

    1. 大地测量学基础, 孔祥元, 武汉大学出版社, 2010.
    2. conformal map projections in geodesy, E. J. Krakiwsky, 1973.

算法简介:

1. 地球视作一个椭球体, 其半长轴为 a, 半短轴为 b, 扁率 α=(a-b)/a. 经度为 λ, 纬度为 φ.
   取赤道上一点 O 为原点, O 的经度为 λ0, 我们的目标是把以 O 为中心, 经度差在 +-3 度内的区域投影
   到 xy 平面上, 并得出 x=f(φ, λ), y=g(φ, λ) 的表达式. 其中 x 是东方相对位移, y 是北方相对位移.
   这个投影需要满足两个前提条件:
   (a). 这个投影是共形的 (conformal mapping), 即椭球面上两条曲线的夹角在投影后保持不变.
   (b). 过 O 的中心经线上的点与 O 的距离投影后保持不变.

2. 根据微分几何的知识可以得出对任意一点 P(φ, λ), 过 P 的经线在 P 点的曲率半径为

       M = a(1 - e^2) / (1 - e^2*sin^2(φ))^(3/2).

   过 P 点的纬线在 P 点的曲率半径为

       N = a / (1 - e^2*sin^2(φ))^(1/2).

   椭球面上的曲线的弧长的全微分满足

       ds^2 = (Mdφ)^2 + (Ncosφdλ)^2.

3. 算法的关键是用一个所谓的 "等距坐标" q 来替换 φ, 即令变量 q 使得

       dq = M/N * secφ * dφ,

   则这时如果把 x, y 看成是关于 (q, λ) 的函数

       x=f(q, λ), y=g(q, λ).

   则共形条件等价于 f, g 满足 Cauchy-Riemann 方程:

       ∂x/∂q = ∂y/∂λ, ∂y/∂q = -∂x/∂λ.

   于是将 x, y 关于 λ 进行 Taylor 展开得到 (注意 x 是关于 λ 的奇函数而 y 是关于 λ 的偶函数)

       x = m1*λ + m3*λ^3/3! + m5*λ^5/5! + ...
       y = m0   + m2*λ^2/2! + m4*λ^4/4! + ...

   由 Cauchy-Riemann 方程我们发现所有的系数 m1, m2, m3, ... 都可以从 m0 出发反复对 q 求导得到,
   所以关键在于求出 m0 关于参数 q 的表达式. 而 m0 是 O 点到与 P 同纬度的 (q, 0) 的经线长度, 其关于
   φ 的导数 dφ 就是曲率 M, 于是

       dm0/dq = (dm0/dφ) * (dφ/dq) = M * (N/M*cosφ) = Ncosφ.

   从而 m1=Ncosφ, m2, m3, ... 可以依次求出. 通过取 Taylor 级数的前面若干项即可得到 x, y 的近似值.

4. UTM 坐标会乘以一个因子 0.9996 使得距离中心经线 220km 左右的两条经线在投影后是近似平行的, 并且给 x 坐标
　　加上 500000m 使得 x 坐标总是正的.

"""
import numpy as np


def latlon2NE(lat, lon):
    """
    经纬度转 (North, East) 坐标, 坐标原点取为经度宽为 6 度的带状区域中心.
    """
    # 1975 年国际椭球体长半轴 a, 扁率 f, 第一离心率平方 e2, 第二离心率平方 ep2.
    a = 6378140
    f = 1 / 298.257
    e2 = 2 * f - f * f
    ep2 = e2 / (1 - e2)

    # 原点所在经度
    lon_origin = np.radians(6 * int(lon / 6) + 3)

    # 中心子午线比例因子
    k0 = 0.9996

    # 角度转弧度
    lat1 = np.radians(lat)
    lon1 = np.radians(lon)

    # 经线在该点处的曲率半径
    N = a / np.sqrt(1 - e2 * np.sin(lat1) * np.sin(lat1))

    # 赤道到该点的经线长度近似值 M, 使用泰勒展开逐项积分然后取前四项.
    # 这个近似值是将 N 作为纬度 \phi 的函数展开为泰勒计数, 然后在区间 [0, lat1] 上积分得到的.
    # 首先计算前四项的系数 a1~a4.
    a1 = 1 - e2/4 - (3*e2*e2)/64 - (5*e2*e2*e2)/256
    a2 = (3*e2)/8 + (3*e2*e2)/32 + (45*e2*e2*e2)/1024
    a3 = (15*e2*e2)/256 + (45*e2*e2*e2)/1024
    a4 = (35*e2*e2*e2)/3072

    # 逐项积分所得估计值
    M = a * (a1*lat1 - a2*np.sin(2*lat1) + a3*np.sin(4*lat1) - a4*np.sin(6*lat1))

    # 辅助量
    T = np.tan(lat1) * np.tan(lat1)
    C = ep2 * np.cos(lat1) * np.cos(lat1)
    A = (lon1 - lon_origin) * np.cos(lat1)

    xcoord = k0 * N * (A + (1 - T + C)*(A*A*A)/6 + (5 - 18*T + T*T + 72*C - 58*ep2)*(A*A*A*A*A)/120)
    ycoord = M + N * np.tan(lat1) * ((A*A)/2 +
                                  (5 - T + 9*C + 4*C*C)*(A*A*A*A)/24 +
                                  (61 - 58*T + T*T + 600*C - 330*ep2)*(A*A*A*A*A*A)/720)
    ycoord *= k0
    if lat < 0:
        ycoord += 10000000

    X = xcoord + 500000
    Y = ycoord
    return X, Y
